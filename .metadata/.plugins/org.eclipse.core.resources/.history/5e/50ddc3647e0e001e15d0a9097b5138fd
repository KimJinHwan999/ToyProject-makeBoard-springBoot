package com.example.board.service;

import java.io.File;
import java.io.IOException;
import java.security.PrivateKey;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.example.board.dto.MemberDTO;
import com.example.board.dto.RSA;
import com.example.board.mapper.MemberMapper;
import com.example.board.util.RSAUtil;
import com.example.board.util.SHA256;


@Service
public class MemberService {

	@Autowired
	MemberMapper memberMapper;
	
	/* 회원가입 */
	public int insertMember(MemberDTO memberdto) {
        return memberMapper.insertMember(memberdto);
    }
	
	/* 아이디 중복체크 ajax */
	public int idAjax(String member_id) {
		return memberMapper.idAjax(member_id);
	}
	
	/* 프로필 이미지 경로 설정 메소드 */
	public MemberDTO memberImgPath(MemberDTO memberdto,
							  MultipartFile file) throws IOException {
		// 저장된 이미지 이름 DB에 저장 (이 때, MultipartFile file에서 file은 form의 img 인풋의 name과 일치해야함)
		String member_img = file.getOriginalFilename();
		
		// 저장된 이미지 파일 폴더에 저장 (이 때, 해당 경로가 존재하지 않는다면 폴더를 생성해줌)
		String img_path = "C:\\uploads\\member_profile\\";
		File uploadPath = new File(img_path, member_img);
		
		if(uploadPath.exists() == false) {
			uploadPath.mkdirs();
		}

		
		file.transferTo(uploadPath);
		memberdto.setMember_img(member_img);
				
		return memberdto;
	}
	
	/* 암호 해쉬화 매소드 */
	public MemberDTO hashPassWord(MemberDTO memberdto) {
		// 암호 해쉬화
		String rawPassword = memberdto.getMember_pw();
		String password = SHA256.encSha256(rawPassword);
		
		memberdto.setMember_pw(password);
		
		return memberdto;
	}
	
	/* 로그인 */
	public List<MemberDTO> signIn(MemberDTO memberdto){
		return memberMapper.signIn(memberdto);
	}
	
	/* 아이디 비밀번호 복호화 */
	public MemberDTO decryptText(MemberDTO memberdto,
								 PrivateKey key) throws Exception{
		
		RSAUtil rsaUtil = new RSAUtil();
		
		String id = rsaUtil.getDecryptText(key, memberdto.getMember_id());
        String password = rsaUtil.getDecryptText(key, memberdto.getMember_pw());
        System.out.println(id);
        System.out.println(password);

		// 복호화된 평문을 재설정
        memberdto.setMember_id(id);
        memberdto.setMember_pw(password);
        
		return memberdto;
	}
	
	/* 로그인 실패 원인 찾는 메소드 */
	public String findId(MemberDTO memberdto){
		return memberMapper.findId(memberdto);
	}
	
	
}


